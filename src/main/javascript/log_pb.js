/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.fun.dodo.tools.meta.Log', null, global);
goog.exportSymbol('proto.fun.dodo.tools.meta.LogList', null, global);
goog.exportSymbol('proto.fun.dodo.tools.meta.LogType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fun.dodo.tools.meta.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fun.dodo.tools.meta.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fun.dodo.tools.meta.Log.displayName = 'proto.fun.dodo.tools.meta.Log';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fun.dodo.tools.meta.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.fun.dodo.tools.meta.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fun.dodo.tools.meta.Log} msg The msg instance to transform.
 * @return {!Object}
 */
proto.fun.dodo.tools.meta.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ownerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scheme: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 5, ""),
    method: jspb.Message.getFieldWithDefault(msg, 6, ""),
    path: jspb.Message.getFieldWithDefault(msg, 7, ""),
    completePath: jspb.Message.getFieldWithDefault(msg, 8, ""),
    client: jspb.Message.getFieldWithDefault(msg, 9, ""),
    server: jspb.Message.getFieldWithDefault(msg, 10, ""),
    headers: jspb.Message.getFieldWithDefault(msg, 11, ""),
    body: jspb.Message.getFieldWithDefault(msg, 12, ""),
    attributes: jspb.Message.getFieldWithDefault(msg, 13, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 21, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fun.dodo.tools.meta.Log}
 */
proto.fun.dodo.tools.meta.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fun.dodo.tools.meta.Log;
  return proto.fun.dodo.tools.meta.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fun.dodo.tools.meta.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fun.dodo.tools.meta.Log}
 */
proto.fun.dodo.tools.meta.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerId(value);
      break;
    case 3:
      var value = /** @type {!proto.fun.dodo.tools.meta.LogType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheme(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompletePath(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setClient(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeaders(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttributes(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fun.dodo.tools.meta.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fun.dodo.tools.meta.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fun.dodo.tools.meta.Log} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.fun.dodo.tools.meta.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOwnerId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getScheme();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContentType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCompletePath();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getClient();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getServer();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getHeaders();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAttributes();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeUint64(
      21,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.fun.dodo.tools.meta.Log.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fun.dodo.tools.meta.Log.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 owner_id = 2;
 * @return {number}
 */
proto.fun.dodo.tools.meta.Log.prototype.getOwnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fun.dodo.tools.meta.Log.prototype.setOwnerId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional LogType type = 3;
 * @return {!proto.fun.dodo.tools.meta.LogType}
 */
proto.fun.dodo.tools.meta.Log.prototype.getType = function() {
  return /** @type {!proto.fun.dodo.tools.meta.LogType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.fun.dodo.tools.meta.LogType} value */
proto.fun.dodo.tools.meta.Log.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string scheme = 4;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getScheme = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setScheme = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string content_type = 5;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getContentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setContentType = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string method = 6;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setMethod = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string path = 7;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setPath = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string complete_path = 8;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getCompletePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setCompletePath = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string client = 9;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getClient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setClient = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string server = 10;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setServer = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string headers = 11;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getHeaders = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setHeaders = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string body = 12;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setBody = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string attributes = 13;
 * @return {string}
 */
proto.fun.dodo.tools.meta.Log.prototype.getAttributes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.fun.dodo.tools.meta.Log.prototype.setAttributes = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional uint64 created_at = 21;
 * @return {number}
 */
proto.fun.dodo.tools.meta.Log.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.fun.dodo.tools.meta.Log.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fun.dodo.tools.meta.LogList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fun.dodo.tools.meta.LogList.repeatedFields_, null);
};
goog.inherits(proto.fun.dodo.tools.meta.LogList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fun.dodo.tools.meta.LogList.displayName = 'proto.fun.dodo.tools.meta.LogList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fun.dodo.tools.meta.LogList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fun.dodo.tools.meta.LogList.prototype.toObject = function(opt_includeInstance) {
  return proto.fun.dodo.tools.meta.LogList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fun.dodo.tools.meta.LogList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.fun.dodo.tools.meta.LogList.toObject = function(includeInstance, msg) {
  var f, obj = {
    logList: jspb.Message.toObjectList(msg.getLogList(),
    proto.fun.dodo.tools.meta.Log.toObject, includeInstance),
    lineCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fun.dodo.tools.meta.LogList}
 */
proto.fun.dodo.tools.meta.LogList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fun.dodo.tools.meta.LogList;
  return proto.fun.dodo.tools.meta.LogList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fun.dodo.tools.meta.LogList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fun.dodo.tools.meta.LogList}
 */
proto.fun.dodo.tools.meta.LogList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fun.dodo.tools.meta.Log;
      reader.readMessage(value,proto.fun.dodo.tools.meta.Log.deserializeBinaryFromReader);
      msg.addLog(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLineCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPageCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fun.dodo.tools.meta.LogList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fun.dodo.tools.meta.LogList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fun.dodo.tools.meta.LogList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.fun.dodo.tools.meta.LogList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fun.dodo.tools.meta.Log.serializeBinaryToWriter
    );
  }
  f = message.getLineCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPageCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated Log log = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.fun.dodo.tools.meta.Log>}
 */
proto.fun.dodo.tools.meta.LogList.prototype.getLogList = function() {
  return /** @type{!Array.<!proto.fun.dodo.tools.meta.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fun.dodo.tools.meta.Log, 1));
};


/** @param {!Array.<!proto.fun.dodo.tools.meta.Log>} value */
proto.fun.dodo.tools.meta.LogList.prototype.setLogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fun.dodo.tools.meta.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fun.dodo.tools.meta.Log}
 */
proto.fun.dodo.tools.meta.LogList.prototype.addLog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fun.dodo.tools.meta.Log, opt_index);
};


proto.fun.dodo.tools.meta.LogList.prototype.clearLogList = function() {
  this.setLogList([]);
};


/**
 * optional uint32 line_count = 2;
 * @return {number}
 */
proto.fun.dodo.tools.meta.LogList.prototype.getLineCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fun.dodo.tools.meta.LogList.prototype.setLineCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 page_count = 3;
 * @return {number}
 */
proto.fun.dodo.tools.meta.LogList.prototype.getPageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fun.dodo.tools.meta.LogList.prototype.setPageCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.fun.dodo.tools.meta.LogType = {
  LOG_TYPE_DEFAULT: 0
};

goog.object.extend(exports, proto.fun.dodo.tools.meta);
